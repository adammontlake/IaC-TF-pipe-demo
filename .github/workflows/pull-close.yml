name: 'action-on-pull-close'
on:
  pull_request:
    types:
      - closed
    #branches: 
    #  - master


permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  
jobs:
  init:
    name: init
    runs-on: ubuntu-latest
    environment: prepare
    
    outputs:
      folders: ${{ steps.diff.outputs.folders }}
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set output list of all new/modified folders 
      id: diff
      run: |
        diffFolders=$( find -name "*.tf" | grep -E "^.*/.*/.*$" | xargs dirname | uniq | grep -v ".terraform" | grep -v "/IaC/modules" | jq  -cnR '[inputs | select(length>0)]')
        echo "JSON of all new or modifed folders: \n $diffFolders"
        echo "::set-output name=folders::${diffFolders}"

  terraform:
    name: 'Terraform-deploy'
    runs-on: ubuntu-latest
    needs: [init]
    environment: production
    
    # foreach folder from init job run this job 
    strategy:
      # if one of the jobs is failling - still continue to run all of the others 
      fail-fast: false
      matrix: 
        folder: ${{ fromJson(needs.init.outputs.folders) }}
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.folder }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Create provider file 
      id: provider
      run: |
        echo "${{ vars.SUBSCRIPTIONS }}" >> provider.tf
        state_file_name="${PWD##*/}.tfstate"
        sed -i "s/terraform.tfstate/${state_file_name}/g" provider.tf

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Validate the Terraform code is written correctly and there are no comppile issues
    - name: Terraform validate
      id: validate
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false

