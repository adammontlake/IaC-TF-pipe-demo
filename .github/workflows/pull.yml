name: 'action-on-pull'
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - edited

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  
jobs:
  init:
    name: init
    runs-on: ubuntu-latest
    environment: prepare
    
    outputs:
      folders: ${{ steps.diff.outputs.folders }}
      plan-modules: ${{ steps.plan-modules.outputs.planModules }}
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set output list of all new/modified folders 
      id: diff
      run: |
        diffFolders=$( find -name "*.tf" | grep -E "^.*/.*/.*$" | xargs dirname | uniq | grep -v ".terraform" | grep -v "/IaC/modules" | jq  -cnR '[inputs | select(length>0)]')
        echo "JSON of all new or modifed folders: \n $diffFolders"
        echo "::set-output name=folders::${diffFolders}"
    
    - name: Set output list of all modules to test with plan
      id: plan-modules
      run: |
        planModules=$( find -name "*.tf" | grep -E "^.*/.*/.*$" | xargs dirname | uniq | grep -v ".terraform" | grep "/IaC/modules" | jq  -cnR '[inputs | select(length>0)]')
        echo "JSON of all new or modifed Module: \n $planModules"
        echo "::set-output name=planModules::${planModules}"

  terraform:
    name: 'Terraform-deploy-plan'
    runs-on: ubuntu-latest
    needs: [init]
    environment: prepare
    
    # foreach folder from init job run this job 
    strategy:
      # if one of the jobs is failling - still continue to run all of the others 
      fail-fast: false
      matrix: 
        folder: ${{ fromJson(needs.init.outputs.folders) }}
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.folder }}

    steps:
    
    # - name: Checkout
    #   uses: actions/checkout@v3
      
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_TOKEN }}
    
        # Checkout the base branch of the pull request (e.g. main/master).
    - name: Checkout base branch
      uses: actions/checkout@v3
      with:
        ref: '${{ github.event.pull_request.base.ref }}'
  
        # Generate Infracost JSON file as the baseline.
    - name: Generate Infracost cost estimate baseline
      run: |
        infracost breakdown --path . \
          --format=json \
          --out-file=/tmp/infracost-base.json
          
    # Checkout the current PR branch so we can create a diff.
    - name: Checkout PR branch
      uses: actions/checkout@v3

    - name: Generate Infracost diff
      run: |
        infracost diff --path . \
          --format=json \
          --compare-to=/tmp/infracost-base.json \
          --out-file=/tmp/infracost.json
          
    - name: Post Infracost comment
      run: |
        infracost comment github --path=/tmp/infracost.json \
          --repo=$GITHUB_REPOSITORY \
          --github-token=${{github.GH_TOKEN}} \
          --pull-request=${{github.event.pull_request.number}} \
          --behavior=update
                                     
                                     
    - name: Create provider file 
      id: provider
      run: |
        echo "${{ vars.SUBSCRIPTIONS }}" >> provider.tf
        state_file_name="${PWD##*/}.tfstate"
        sed -i "s/terraform.tfstate/${state_file_name}/g" provider.tf

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false

    - name: add-plan-comment
      id: comment_before_pr
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request' && (success() || failure())
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style 🖌\`#$#$#$\`
          #### Terraform Initialization ⚙️\`#$#$#$\`
          #### Terraform Validation 🤖#$#$#$
          #### Terraform Plan 📖\`#$#$#$\`
          #### Checkov 🧪\` #$#$#$ \`
          <details><summary>Show Plan</summary>
          
          \`\`\`#$#$#$\`\`\`
          
          </details>

          <details><summary>Show Checkov Results</summary>

          removed line 2

          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
