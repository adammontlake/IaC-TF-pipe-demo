name: 'action-on-push'
on:
  push: 
    branches-ignore:
      - main

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  
jobs:
  init:
    name: init
    runs-on: ubuntu-latest
    environment: prepare
    
    outputs:
      folders: ${{ steps.diff.outputs.folders }}
      modules: ${{ steps.diff-modules.outputs.modules }}
      plan-modules: ${{ steps.plan-modules.outputs.planModules }}
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set output list of all new/modified folders 
      id: diff
      run: |
        diffFolders=$( find -name "*.tf" | grep -E "^.*/.*/.*$" | xargs dirname | uniq | grep -v ".terraform" | grep -v "/IaC/modules" | jq  -cnR '[inputs | select(length>0)]')
        echo "JSON of all new or modifed folders: \n $diffFolders"
        echo "::set-output name=folders::${diffFolders}"
    
    - name: Set output list of all new/modified modules 
      id: diff-modules
      run: |
        diffModules=$( find -name "*.tf" | grep -E "^.*/.*/.*$" | xargs dirname | uniq | grep -v ".terraform" | grep "/IaC/modules" | tr '\n' ',')
        echo "JSON of all new or modifed Module: \n $diffModules"
        echo "::set-output name=modules::${diffModules}"
    
    - name: Set output list of all modules to test with plan
      id: plan-modules
      run: |
        planModules=$( find -name "*.tf" | grep -E "^.*/.*/.*$" | xargs dirname | uniq | grep -v ".terraform" | grep "/IaC/modules" | jq  -cnR '[inputs | select(length>0)]')
        echo "JSON of all new or modifed Module: \n $planModules"
        echo "::set-output name=planModules::${planModules}"

  readme-generation:
    name: 'readme-generation'
    runs-on: ubuntu-latest
    needs: [init]
    environment: prepare

    strategy:
      fail-fast: true

    steps:
    # Pull the latest changes
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.push_request.head.ref }}
        token: ${{ secrets.GH_TOKEN }}

    # Check required docs update for each module
    - name: Render terraform docs inside the README.md and push changes back to PR branch
      uses: terraform-docs/gh-actions@v1.0.0
      with:
        working-dir: ${{ needs.init.outputs.modules }}
        output-file: README.md
        output-method: replace
        git-push: "true"
        config-file: ../docs_config.yml
        git-commit-message: "Automatic documentation update"
  
  check-branch-naming:
    name: "check-branch-naming"
    runs-on: ubuntu-latest
    needs: [init]
    environment: prepare
    strategy:
      fail-fast: true
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: check branch name
      id: branch-name
      run: |
        branch_name="$(git rev-parse --abbrev-ref HEAD)"
        valid_branch_regex="${{ vars.VALID_BRANCH_REGEX }}"
        
        if [[ $branch_name =~ $valid_branch_regex ]]; then
          echo "Branch name: $branch_name is valid"
        else
          echo "Branch name: $branch_name is not valid"
          exit 1
        fi
          
  check-modules:
    name: 'check-modules'
    runs-on: ubuntu-latest
    needs: [init,readme-generation]
    environment: prepare
    
    # foreach folder from init job run this job 
    strategy:
      # if one of the jobs is failling - still continue to run all of the others 
      fail-fast: false
      matrix: 
        folder: ${{ fromJson(needs.init.outputs.plan-modules) }}
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.folder }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check 
      
    - name: Create provider file 
      id: provider
      run: |
        echo "${{ vars.SUBSCRIPTIONS }}" >> provider.tf
        state_file_name="${PWD##*/}.tfstate"
        sed -i "s/terraform.tfstate/${state_file_name}/g" provider.tf
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init  

    - name: Terraform Plan
      run: terraform plan -var-file=terraform.tfvars.test

  terraform-validate:
    name: 'Terraform-validate'
    runs-on: ubuntu-latest
    needs: [init,readme-generation]
    environment: prepare
    
    # foreach folder from init job run this job 
    strategy:
      # if one of the jobs is failling - still continue to run all of the others 
      fail-fast: false
      matrix: 
        folder: ${{ fromJson(needs.init.outputs.folders) }}
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.folder }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Validates the configuration files in a directory, referring only to the configuration and not accessing any remote services such as remote state, provider APIs, etc.
    - name: Terraform validate
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

  security-scanning:
    name: 'security-scanning'
    runs-on: ubuntu-latest
    needs: [init,readme-generation]
    environment: prepare
    
    # foreach folder from init job run this job 
    strategy:
      # if one of the jobs is failling - still continue to run all of the others 
      fail-fast: true
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    #Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ./
        check: CKV_AZURE_3 # optional: run only a specific check_id. can be comma separated list
        soft_fail: false # optional: do not return an error code if there are failed checks
        download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
        framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
